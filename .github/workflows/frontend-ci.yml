name: Frontend CI

# Disparadores: Se ejecuta en push a ramas feature/* y en Pull Requests hacia develop
on:
  push:
    branches: [ "feature/**" ] # Para cambios en ramas de funcionalidad
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "develop", "main" ] # Cuando se abre/actualiza un PR hacia develop

jobs:
  build-lint-scan:
    name: BBuild, Lint & Scan Frontend
    runs-on: ubuntu-latest # Usar la última versión estable de Ubuntu como runner

    strategy:
      matrix:
        node-version: [22.x]

    permissions:
      pull-requests: write
      issues: write # Necesario para crear/actualizar comentarios en el PR
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Acción estándar para descargar tu código
      with:
        # Necesario para que SonarCloud pueda analizar correctamente los PRs
        # Obtiene todo el historial para que Sonar pueda diferenciar entre código nuevo y antiguo.
        fetch-depth: 0

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4 # Acción para configurar Node.js
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Netlify
      run: npm install -g netlify-cli

    - name: Install dependencies
      run: npm ci

    - name: Run Linter (ESLint)
      run: npm run lint
      # Si el comando falla, el workflow fallará

    - name: Build Project
      run: npm run build
      # Esto verifica que el proyecto compile sin errores


    - name: Run Tests
      run: npm test -- --coverage 


    # --- PASO DE SCANNER DE SONARCLOUD ---
    # Se ejecutará SÓLO en Pull Requests hacia develop o main.
    - name: SonarCloud Scan
      if: github.event_name == 'pull_request'
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Deploy to Netlify and Capture URL
      id: netlify-deploy
      run: |
        BRANCH_NAME=${{ github.head_ref || github.ref_name }}
        
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Deploying to production..."
          netlify deploy --dir=dist --prod \
            --auth=$NETLIFY_AUTH_TOKEN --site=$NETLIFY_SITE_ID
        else
          echo "Deploying preview from branch: $BRANCH_NAME"
          DEPLOY_OUTPUT=$(netlify deploy --dir=dist --json \
            --auth=$NETLIFY_AUTH_TOKEN --site=$NETLIFY_SITE_ID)
          
          PREVIEW_URL=$(echo $DEPLOY_OUTPUT | jq -r .deploy_url)
          
          echo "Preview URL: $PREVIEW_URL"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
        fi
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Post Preview URL to PR
      if: github.event_name == 'pull_request' && steps.netlify-deploy.outputs.preview_url
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ¡El despliegue de previsualización está listo! 🎉

          Puedes revisar los cambios en vivo aquí:
          **[${{ steps.netlify-deploy.outputs.preview_url }}](${{ steps.netlify-deploy.outputs.preview_url }})**
        edit-mode: replace